{"version":3,"sources":["Images/SimonGame.png","Images/Jobble.png","Images/Catspotting.png","Images/jordantaylorlogo.png","Components/Home.js","Components/Header.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Header","Container","fluid","Row","Col","xs","src","require","style","width","className","href","a","About","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,8C,sICqE5BC,I,QC/BAC,MAlCf,WAEI,OACI,oCACA,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,CAAKC,GAAI,IACT,yBAAKC,IAAKC,EAAQ,IAAmCC,MAAO,CAACC,MAAM,WAEnE,kBAACL,EAAA,EAAD,OAGJ,kBAACD,EAAA,EAAD,CAAKO,UAAU,WACX,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,aACL,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,MACL,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,WACL,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,MACL,uBAAGC,KAAK,qCAAoC,kBAACP,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,YACjD,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,MACL,uBAAGE,GAAC,EAACD,KAAK,2CAA0C,kBAACP,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,cACzD,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,MACL,kBAACN,EAAA,EAAD,KAAK,uBAAGM,UAAU,aAAb,aCZNG,MAXf,WACI,OACG,kBAACZ,EAAA,EAAD,CAAWC,OAAK,GACZ,yBAAKQ,UAAU,SAASI,GAAG,WACtB,0M,YCWDC,MAXf,WACE,OACE,oCACA,yBAAKL,UAAU,SACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3d111d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SimonGame.d94577bf.png\";","module.exports = __webpack_public_path__ + \"static/media/Jobble.90f75143.png\";","module.exports = __webpack_public_path__ + \"static/media/Catspotting.aab56e9e.png\";","module.exports = __webpack_public_path__ + \"static/media/jordantaylorlogo.7981e7c8.png\";","import React, { useState } from 'react';\nimport { Carousel, Container, Col, Row } from 'react-bootstrap';\n\nfunction Home() {\n    const [index, setIndex] = useState(0);\n    const fontStyle = { color: 'white', opacity: '100%' };\n    const containerStyle = { background: '#055864', opacity: '85%', 'border-radius': '20px'};\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);  };\n    return (\n        <>\n        <Container fluid=\"sm\">\n            <Col xs={9}>\n        <Carousel activeIndex={index} onSelect={handleSelect}>\n            <Carousel.Item>\n                <a href={'https://javascriptures.github.io/Simon-Memory/'}>\n                    <img\n                    className=\"d-block w-100\"\n                    src={require('../Images/SimonGame.png')}\n                    alt=\"First slide\"\n                    />\n                </a>\n                <Carousel.Caption>\n                    <Container style={containerStyle}>\n                <h3 style={fontStyle}>Simon Memory Game</h3>\n                <p style={fontStyle}>An online game based on the handheld classic. Built with vanilla JS DOM.</p>\n                </Container>\n                </Carousel.Caption>\n            </Carousel.Item>\n            <Carousel.Item>\n                <a href={'https://jobble-frontend.herokuapp.com/'}>\n                    <img\n                    className=\"d-block w-100\"\n                    src={require('../Images/Jobble.png')}\n                    alt=\"Second slide\"\n                    />\n                </a>\n                <Carousel.Caption>\n                <Container style={containerStyle}>\n                <h3 style={fontStyle}>Jobble</h3>\n                <p style={fontStyle}>A job-hunting site for developers. Built using a MERN stack.</p>\n                </Container>\n                </Carousel.Caption>\n            </Carousel.Item>\n            <Carousel.Item>\n                <a href={'https://catspotting-frontend.herokuapp.com/'}>\n                    <img\n                    className=\"d-block w-100\"\n                    src={require('../Images/Catspotting.png')}\n                    alt=\"Third slide\"\n                    />\n                </a>\n                <Carousel.Caption>\n                <Container style={containerStyle}>\n                <h3 style={fontStyle}>Catspotting</h3>\n                <p style={fontStyle}>\n                    A social media platform for cat lovers. Built using a ReactJS/Django stack.\n                </p>\n                </Container>\n                </Carousel.Caption>\n            </Carousel.Item>\n    </Carousel>\n    </Col>\n    </Container>\n</>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Container } from 'react-bootstrap';\n\nfunction Header() {\n\n    return (\n        <>\n        <Container fluid>\n            <Row>\n                <Col> </Col>\n                <Col xs={10}>\n                <img src={require('../Images/jordantaylorlogo.png')} style={{width:'100%'}}/>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <Row className=\"menubar\">\n                <Col><p className=\"menuitems\">projects</p></Col>\n                <Col><p className=\"menuitems\">|</p></Col>\n                <Col><p className=\"menuitems\">resume</p></Col>\n                <Col><p className=\"menuitems\">|</p></Col>\n                <a href=\"https://github.com/javascriptures\"><Col><p className=\"menuitems\">github</p></Col></a>\n                <Col><p className=\"menuitems\">|</p></Col>\n                <a a href=\"https://www.linkedin.com/in/jordan-tay/\"><Col><p className=\"menuitems\">linkedin</p></Col></a>\n                <Col><p className=\"menuitems\">|</p></Col>\n                <Col><p className=\"menuitems\">blog</p></Col>\n            </Row>\n        </Container>\n        {/* <div>slanted div text</div>\n        <div>\n          slanted div text<br/> on several lines<br/> an other line\n        </div>\n        <div>wider slanted div text with more text inside</div> */}\n        </>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\n\nfunction About() {\n    return(\n       <Container fluid>\n           <div className=\"square\" id=\"diamond\">\n                <h4>Hi I'm Jordan and I'm a Full-Stack Developer based in sunny Los Angeles! This page is still under construction but feel free to click through my project gallery below!\n                </h4>\n           </div>\n       </Container> \n    )\n}\n\nexport default About;","import React from 'react';\nimport Home from './Components/Home';\nimport Header from './Components/Header';\nimport About from './Components/About';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"slant\">\n      <Header/>\n      <About/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}